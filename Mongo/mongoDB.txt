Dependencies for MongoDB
start MongoDb server 
-sudo mongod
open new terminal
-mongo

*Intro to MongoDB

show databases
-show dbs

current database
-db

create or switch database
- use {name of the database}

delete database
- use {names of the database}
-db.dropDatabase()

=tables
view all collections
-show collections

create a new collection
-db.createCollection(" {collection name} ")

destroy a collection
- db.{collection name}.drop()

*Assignment
Create a database called 'my_first_db'.
-use my_first_db

Create students collection.
-db.createCollection("students")

Each document you insert into this collection should have the following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})
Create 5 students with the appropriate info.
-db.students.insert({name:"Mike",home_state: "Virginia",lucky_number: 7,birthday: {month: 11, day: 9,year: 1990}})

Get all students.
-db.students.find().pretty()

Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
-db.students.find({home_state: "Texas"}).pretty()

Get all students whose lucky number is:
greater than 5
-db.students.find({lucky_number: {$gt: 5}}).pretty()

less than or equal to 10
-db.students.find({lucky_number: {$lte: 10}}).pretty()

between 1 and 9 (inclusive)
-db.students.find({lucky_number:  {$gt:1, $lt : 10}}).pretty()

Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.
-db.students.update({},{$set : {interests: ["coding","brunch","MongoDB"]}},{upser:false,multi:true})

Add some unique interests for each particular student into each of their interest arrays.
-db.students.update({ _id:ObjectId("5a79dbcc1cf331281d42be59")},{$addToSet:{ interests: "sleep"}})

Add the interest 'taxes' into someone's interest array.
-db.students.update({ _id:ObjectId("5a79dba71cf331281d42be58")},{$addToSet:{ interests: "taxes"}})

Remove the 'taxes' interest you just added.("this removes the last one added")
-db.students.update({ _id:ObjectId("5a79dba71cf331281d42be58")},{$pop:{ interests: 1}})

Remove all students who are from California (or Washington).
- db.students.remove({ home_state:"California"})

Remove a student by name. 
-db.students.remove({ name: "Marco"})

Remove a student whose lucky number is greater than 5 (JUST ONE)
-db.students.remove({ lucky_number: {$gt:5}},true)

Add a field to each student collection called 'number_of_belts' and set it to 0.
-db.students.update({},{$set : {number_of_belts: 0}},{upser:false,multi:true})

Increment this field by 1 for all students in Washington (Seattle Dojo).
-db.students.updateMany({home_state: "Washington"},{$set:{number_of_belts:1}})

Rename the 'number_of_belts' field to 'belts_earned'
-db.students.updateMany({},{$rename:{"number_of_belts":"belts_earned"}})

Remove the 'lucky_number' field.
-db.students.update({},{$unset : {lucky_number:"" }},{upser:false,multi:true})

Add a 'updated_on' field, and set the value as the current date.
-db.students.update({},{$set : {updated_on: new Date()}},{upser:false,multi:true})










